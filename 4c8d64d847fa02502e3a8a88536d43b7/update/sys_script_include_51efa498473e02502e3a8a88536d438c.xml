<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>global.CreateCustomTable</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>CreateCustomTable</name>
        <script><![CDATA[var CreateCustomTable = Class.create();
CreateCustomTable.prototype = {
    initialize: function() {
    },

	// Note: wrapping TableUtils in this script include so that it can be called from scopped applications - enabled by setting this script to "allow access from all scopes - see above setting"

	tableExists: function(tableName) {
		
		var table = new TableUtils(tableName);

		return table.tableExists(tableName);
	},

	dropTable: function(tableName) {

		var returnObject = {};

		try {
			var table = new TableUtils(tableName);

			if(table.tableExists()) {
				gs.info('dropping table: ' + tableName);
				table.drop(tableName);

				returnObject.success = true;
				returnObject.message = 'Table dropped';
				return returnObject;
			} else {
				returnObject.success = true;
				returnObject.message = 'Table did not exist, no tables dropped';
				return returnObject;
			}
		} catch(e) {
				returnObject.success = false;
				returnObject.message = 'Encountered error while dropping table: ' + e;
				return returnObject;
		}
	},

	createTable: function(tableDefinition) {

		var returnObject = {};

		try {
			var table = new TableUtils(tableDefinition.tableName);

			if(!table.tableExists()) {

				var attrs = new Packages.java.util.HashMap();

				tableDefinition.fieldList.forEach(function(field){

					gs.info('***************** creating table attribute: ' + field.name);

					var ca = new GlideColumnAttributes(field.name);
					ca.setUsePrefix(field.usePrefix);
					ca.setType(field.type);
					ca.setLength(field.maxLength);
					attrs.put(field.name, ca);

				});

				var tc = new GlideTableCreator(tableDefinition.tableName, tableDefinition.tableName);

					gs.info('***************** setting attributes on table: ' + tableDefinition.tableName);
				tc.setColumnAttributes(attrs);

				if(tableDefinition.tableExtension) {
					gs.info('***************** extending table: ' + tableDefinition.tableExtension);
					tc.setExtends(tableDefinition.tableExtension);
				}

				gs.info('***************** committing new table: ' + tableDefinition.tableName);

				tc.update();

				returnObject.success = true;
				returnObject.message = 'Table created';
				return returnObject;
			} else {
				gs.info('***************** Table: ' + tableDefinition.tableName + ' already exists');
				returnObject.success = false;
				returnObject.message = 'Table already exists';
				return returnObject;
			}
		} catch(e) {
			returnObject.success = false;
			returnObject.message = e;
			return returnObject;
		}

	},

    type: 'CreateCustomTable'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>larry.daponte</sys_created_by>
        <sys_created_on>2024-06-10 19:28:45</sys_created_on>
        <sys_id>51efa498473e02502e3a8a88536d438c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CreateCustomTable</sys_name>
        <sys_package display_value="Table Creation Utility" source="4c8d64d847fa02502e3a8a88536d43b7">4c8d64d847fa02502e3a8a88536d43b7</sys_package>
        <sys_policy/>
        <sys_scope display_value="Table Creation Utility">4c8d64d847fa02502e3a8a88536d43b7</sys_scope>
        <sys_update_name>sys_script_include_51efa498473e02502e3a8a88536d438c</sys_update_name>
        <sys_updated_by>larry.daponte</sys_updated_by>
        <sys_updated_on>2024-06-10 19:28:45</sys_updated_on>
    </sys_script_include>
</record_update>
