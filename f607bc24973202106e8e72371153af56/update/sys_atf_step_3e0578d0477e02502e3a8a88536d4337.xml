<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_atf_step">
    <sys_atf_step action="INSERT_OR_UPDATE">
        <active>true</active>
        <copied_from/>
        <description>Run Server Side Validation Script</description>
        <display_name>Run Server Side Script</display_name>
        <inputs/>
        <mugshots_cache_json/>
        <notes/>
        <order>1</order>
        <step_config display_value="Run Server Side Script">41de4a935332120028bc29cac2dc349a</step_config>
        <sys_class_name>sys_atf_step</sys_class_name>
        <sys_created_by>larry.daponte</sys_created_by>
        <sys_created_on>2024-06-10 19:51:04</sys_created_on>
        <sys_id>3e0578d0477e02502e3a8a88536d4337</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Run Server Side Script</sys_name>
        <sys_package display_value="Table Creation Utility" source="f607bc24973202106e8e72371153af56">f607bc24973202106e8e72371153af56</sys_package>
        <sys_policy/>
        <sys_scope display_value="Table Creation Utility">f607bc24973202106e8e72371153af56</sys_scope>
        <sys_update_name>sys_atf_step_3e0578d0477e02502e3a8a88536d4337</sys_update_name>
        <sys_updated_by>larry.daponte</sys_updated_by>
        <sys_updated_on>2024-06-10 19:51:04</sys_updated_on>
        <table/>
        <test display_value="Test Table Creation API">2143bc10477e02502e3a8a88536d4300</test>
        <timeout/>
        <warning_message/>
    </sys_atf_step>
    <sys_variable_value action="delete_multiple" query="document_key=3e0578d0477e02502e3a8a88536d4337"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_atf_step</document>
        <document_key>3e0578d0477e02502e3a8a88536d4337</document_key>
        <order>200</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>larry.daponte</sys_created_by>
        <sys_created_on>2024-06-10 19:51:05</sys_created_on>
        <sys_id>4e25fc50477e02502e3a8a88536d43a9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>larry.daponte</sys_updated_by>
        <sys_updated_on>2024-06-10 19:51:05</sys_updated_on>
        <value>// You can use this step to execute a variety of server-side javascript tests including&#13;
// jasmine tests and custom assertions&#13;
//&#13;
//&#13;
// Pass or fail a step: Override the step outcome to pass or fail. This is ignored &#13;
//                      by jasmine tests&#13;
//&#13;
//  - Return true from the main function body to pass the step&#13;
//  - Return false from the main function body to fail the step&#13;
//&#13;
//&#13;
// outputs:       Pre-defined Step config Output variables to set on this step during &#13;
//                execution that are available to later steps&#13;
//&#13;
// steps(SYS_ID): A function to retrieve Output variable data from a step that executed&#13;
//                earlier in the test. The desired step's sys_id is required&#13;
//&#13;
// params:        The current test run data set's parameter data including both &#13;
//                exclusive and shared parameters&#13;
//&#13;
//  Example:&#13;
//&#13;
//      // Test step 1 - add data&#13;
//      var gr = new GlideRecord('sc_task');&#13;
//      // If parameterized testing is enabled, parameters are stored in the params object&#13;
//      gr.setValue('short_description', params.u_my_short_description)&#13;
//      gr.setValue('caller', params.u_my_user.manager)&#13;
//      // this sample step's Step config has Output variables named table and record_id&#13;
//      outputs.table = 'sc_task';&#13;
//      outputs.record_id = gr.insert();&#13;
//&#13;
//      // Test step 2 - access added data and validate&#13;
//      // check that the record exists (or that business logic changed it)&#13;
//      var gr = new GlideRecord("sc_task");&#13;
//      gr.get(steps(PREVIOUS_STEP_SYS_ID).record_id);&#13;
//      assertEqual({name: "task gr exists", shouldbe: true, value: gr.isValidRecord()});&#13;
//&#13;
//&#13;
// stepResult.setOutputMessage: Log a message to step results after step executes.&#13;
//                              Can only be called once or will overwrite previous &#13;
//                              message&#13;
//&#13;
//  Example:&#13;
//&#13;
//      var gr = new GlideRecord('sc_task');&#13;
//      gr.setValue('short_description', 'verify task can be inserted');&#13;
//      var grSysId = gr.insert();&#13;
//      var justCreatedGR = new GlideRecord('sc_task');&#13;
//      if (justCreatedGR.get(grSysId)) {&#13;
//            stepResult.setOutputMessage("Successfully inserted task record");&#13;
//            return true; // pass the step&#13;
//      } else { &#13;
//            stepResult.setOutputMessage("Failed to insert task record");&#13;
//            return false; // fail the step&#13;
//      }&#13;
//&#13;
//&#13;
// Note: describe is only supported in Global scope.&#13;
// Use 'describe' to create a suite of test scripts and 'it' to define test expectations&#13;
//&#13;
//  Example jasmine test:&#13;
//&#13;
//      describe('my suite of script tests', function() {&#13;
//            it('should meet expectations', function() {&#13;
//                  expect(true).not.toBe(false);&#13;
//            });&#13;
//      });&#13;
//      // make sure to uncomment jasmine.getEnv().execute(); outside the function body&#13;
//&#13;
//&#13;
// assertEqual: A function used to compare that assertion.shouldbe == assertion.value;&#13;
//              in case of failure it throws an Error and logs that the assertion by&#13;
//              name has failed&#13;
//&#13;
//  Example:&#13;
//&#13;
//      var testAssertion = {&#13;
//            name: "my test assertion",&#13;
//            shouldbe: "expected value"&#13;
//            value: "actual value",&#13;
//      };&#13;
//      assertEqual(testAssertion); // throws Error, logs message to test step output&#13;
//&#13;
(function(outputs, steps, params, stepResult, assertEqual) {&#13;
    // add test script here&#13;
&#13;
	var customTableDef = JSON.parse(params.u_table_definition);&#13;
	var guid = gs.generateGUID();&#13;
	&#13;
	customTableDef.tableName = customTableDef.tableName + "_" + guid;&#13;
	customTableDef.tableLabel = customTableDef.tableLabel + " " + guid;&#13;
&#13;
	var createCustomTable = new global.CreateCustomTable();&#13;
&#13;
	var testReturnValue = runTest(customTableDef);&#13;
&#13;
	// cleanup&#13;
&#13;
	if(createCustomTable.tableExists(customTableDef.tableName)) {&#13;
		gs.info('dropping table: ' + customTableDef.tableName);&#13;
		createCustomTable.dropTable(customTableDef.tableName);&#13;
	}&#13;
&#13;
	return testReturnValue;&#13;
&#13;
	function runTest(customTableDef) {&#13;
			&#13;
		createCustomTable = new global.CreateCustomTable();&#13;
		var result = createCustomTable.createTable(customTableDef);&#13;
&#13;
		if(!result.success) {&#13;
			stepResult.setOutputMessage(result.message);&#13;
			return false; // fail the step&#13;
		}&#13;
&#13;
		var table = new GlideRecord('sys_db_object');&#13;
&#13;
		table.addEncodedQuery('name=' + customTableDef.tableName);&#13;
		table.setLimit(1);&#13;
		table.query();&#13;
&#13;
		if(!table.next()) {&#13;
			stepResult.setOutputMessage('table not found');&#13;
			return false;&#13;
		}&#13;
&#13;
		// Note: a health scan will probably not like the use of getRefRecord which is the code equivilent of "dot walking".  &#13;
		// The alternative is to create another GlideRecord and do anothger query which seems absurd&#13;
&#13;
		if(table.super_class.getRefRecord().getValue('name') != customTableDef.tableExtension) {&#13;
			stepResult.setOutputMessage('table extension class does not match, lookig for: ' + customTableDef.tableExtension + ', found: ' + table.super_class.getRefRecord().getValue('name'));&#13;
			return false;&#13;
		}&#13;
&#13;
		var dict = new GlideRecord('sys_dictionary');&#13;
		dict.addEncodedQuery('name=u_servicenow_table_count^internal_type!=collection^ORinternal_type=NULL^internal_type!=GUID^ORinternal_type=NULL');&#13;
		dict.query();&#13;
&#13;
		if (dict.getRowCount() &lt;= 0) {&#13;
			stepResult.setOutputMessage('no columns found for custom table');&#13;
			return false;&#13;
		}&#13;
&#13;
		dictList = [];&#13;
&#13;
		while(dict.next()) {&#13;
			dictList.push({&#13;
				internal_type: dict.getValue('internal_type'),&#13;
				element: dict.getValue('element'),&#13;
				column_label: dict.getValue('column_label'),&#13;
				max_length: dict.getValue('max_length')&#13;
			});&#13;
		}&#13;
&#13;
		for (item in customTableDef.fieldList) {&#13;
&#13;
			field = customTableDef.fieldList[item];&#13;
&#13;
			var findResult = find(dictList, field.name);&#13;
&#13;
			if(!findResult) {&#13;
				stepResult.setOutputMessage('new table is missing column: ' + field.name);&#13;
				return false;&#13;
			}&#13;
&#13;
			if(!(findResult.internal_type == field.type) || !(findResult.max_length == field.maxLength)) {&#13;
				stepResult.setOutputMessage('column definition missmatch, field: ' + field.name + ', expected: ' + field.type + ', found: ' + findResult.internal_type);&#13;
				return false;&#13;
			}&#13;
		}&#13;
&#13;
		stepResult.setOutputMessage('table creation verified');&#13;
		return true;&#13;
&#13;
		function find(arrayList, value) {&#13;
			for (item in arrayList) {&#13;
				if (arrayList[item].element === value) {&#13;
					return arrayList[item];&#13;
				}&#13;
			}&#13;
&#13;
			return false;&#13;
		}&#13;
	}&#13;
&#13;
})(outputs, steps, params, stepResult, assertEqual);&#13;
// uncomment the next line to execute this script as a jasmine test&#13;
//jasmine.getEnv().execute();&#13;
</value>
        <variable display_value="Test script">989d9e235324220002c6435723dc3484</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_atf_step</document>
        <document_key>3e0578d0477e02502e3a8a88536d4337</document_key>
        <order>100</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>larry.daponte</sys_created_by>
        <sys_created_on>2024-06-10 19:51:05</sys_created_on>
        <sys_id>8a25fc50477e02502e3a8a88536d43a9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>larry.daponte</sys_updated_by>
        <sys_updated_on>2024-06-10 19:51:05</sys_updated_on>
        <value>3.1</value>
        <variable display_value="Jasmine version">42f2564b73031300440211d8faf6a777</variable>
    </sys_variable_value>
</record_update>
